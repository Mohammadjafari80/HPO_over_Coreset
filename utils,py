import random
import numpy as np
import torch
import torch.nn.functional as F

def set_cudnn(device='cuda'):
    torch.backends.cudnn.enabled = (device == 'cuda')
    torch.backends.cudnn.benchmark = (device == 'cuda')


def set_seed(seed=1):
    random.seed(seed)
    np.random.seed(seed)
    torch.manual_seed(seed)
    torch.cuda.manual_seed(seed)

class WeightedCrossEntropyLoss(nn.Module):
    def __init__(self):
        super(WeightedCrossEntropyLoss, self).__init__()

    def forward(self, outputs, labels, weights):
        loss = F.cross_entropy(outputs, labels, reduction='none')
        weighted_loss = torch.mean(loss * weights)
        return weighted_loss
    
    
    